{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "UpdatePauseTime": {
      "Type": "String",
      "Description": "The time to wait between new instances coming online and the next batch being killed during an ASG update.",
      "Default": "PT0S"
    },
    "UpdateMaxBatchSize": {
      "Type": "String",
      "Description": "The maximum number of instances to be killed at one time during an ASG update.",
      "Default": 1
    },
    "UpdateMinInService": {
      "Type": "String",
      "Description": "The minimum number of instances in service during an ASG update.",
      "Default": 0
    },
    "MinSize": {
      "Type": "String",
      "Description": "The minimum number of instances",
      "Default": 1
    },
    "MaxSize": {
      "Type": "String",
      "Description": "The maximum number of instances",
      "Default": 1
    },
    "HealthCheckGracePeriod": {
      "Type": "String",
      "Description": "The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.",
      "Default": 600
    },
    "InstanceType": {
      "Type": "String",
      "Description": "The size of the instances",
      "Default": "t2.small"
    },
    "ImageId": {
      "Type": "String",
      "Default": "ami-9d6fb4ee"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "RancherRDSSecurityGroup": {
      "Type": "String"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Default": "vpc-"
    },
    "PublicSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Default": "subnet-"
    },
    "ELBConnectionDraining": {
      "Type": "String",
      "Description": "Connection draining ensures that the load balancer completes serving all in-flight requests made to a registered instance when the instance is deregistered or becomes unhealthy",
      "Default": 30
    },
    "CattleDBCattleMysqlHost": {
      "Type": "String"
    },
    "CattleDBCattleMysqlPort": {
      "Type": "String"
    },
    "CattleDBCattleMysqlName": {
      "Type": "String"
    },
    "CattleDBCattleUsername": {
      "Type": "String"
    },
    "CattleDBCattlePassword": {
      "Type": "String"
    }
  },
  "Resources": {
    "ComponentAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Ref": "UpdateMinInService"
          },
          "MaxBatchSize": {
            "Ref": "UpdateMaxBatchSize"
          },
          "PauseTime": {
            "Ref": "UpdatePauseTime"
          }
        }
      },
      "Properties": {
        "Tags": [
          {
            "Value": "rancher",
            "PropagateAtLaunch": true,
            "Key": "Project"
          },
          {
            "Value": "rancher-server",
            "PropagateAtLaunch": true,
            "Key": "Name"
          },
          {
            "Value": "rancher-server",
            "PropagateAtLaunch": true,
            "Key": "Component"
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "ComponentElasticLoadBalancer"
          }
        ],
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "LaunchConfigurationName": {
          "Ref": "ComponentLaunchConfiguration"
        },
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": {
          "Ref": "HealthCheckGracePeriod"
        }
      }
    },
    "ComponentLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ComponentSecurityGroup"
          },
          {
            "Ref": "RancherRDSSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ComponentInstanceProfile"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "rancher:\n",
                "  services:\n",
                "    rancher-server:\n",
                "      image: rancher/server\n",
                "      ports:\n",
                "      - 8080:8080\n",
                "      restart: always\n",
                "      environment:\n",
                {
                  "Fn::Join": [
                    "",
                    [
                      "        - CATTLE_DB_CATTLE_MYSQL_HOST=",
                      {
                        "Ref": "CattleDBCattleMysqlHost"
                      },
                      "\n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "        - CATTLE_DB_CATTLE_MYSQL_PORT=",
                      {
                        "Ref": "CattleDBCattleMysqlPort"
                      },
                      "\n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "        - CATTLE_DB_CATTLE_MYSQL_NAME=",
                      {
                        "Ref": "CattleDBCattleMysqlName"
                      },
                      "\n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "        - CATTLE_DB_CATTLE_USERNAME=",
                      {
                        "Ref": "CattleDBCattleUsername"
                      },
                      "\n"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "        - CATTLE_DB_CATTLE_PASSWORD=",
                      {
                        "Ref": "CattleDBCattlePassword"
                      },
                      "\n"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "ToPort": 80,
            "IpProtocol": "tcp",
            "FromPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "An ELB group allowing access only to from the corresponding component"
      }
    },
    "ComponentSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "FromPort": 8080,
            "ToPort": 8080,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          },
          {
            "FromPort": 4500,
            "ToPort": 4500,
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "FromPort": 22,
            "ToPort": 22,
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "FromPort": 500,
            "ToPort": 500,
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "A component security group allowing access only from the corresponding ELB"
      }
    },
    "ComponentElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "Subnets": {
          "Ref": "PublicSubnets"
        },
        "Listeners": [
          {
            "InstancePort": 8080,
            "LoadBalancerPort": 80,
            "Protocol": "tcp",
            "InstanceProtocol": "tcp"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Policies": [
          {
            "PolicyName": "EnableProxyProtocol",
            "InstancePorts": [
              "8080"
            ],
            "PolicyType": "ProxyProtocolPolicyType",
            "Attributes": [
              {
                "Name": "ProxyProtocol",
                "Value": "true"
              }
            ]
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": 3,
          "Interval": 15,
          "Target": "HTTP:8080/ping",
          "Timeout": 10,
          "UnhealthyThreshold": 8
        },
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": {
            "Ref": "ELBConnectionDraining"
          }
        }
      }
    },
    "ComponentInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RancherRole"
          }
        ]
      }
    },
    "EC2ComponentPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudwatch:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "ec2:Describe*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "elasticache:*"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "PolicyName": "EC2ComponentPolicy",
        "Roles": [
          {
            "Ref": "RancherRole"
          }
        ]
      }
    },
    "RancherRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    }
  }
}
